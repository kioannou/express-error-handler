// Missing parameter on POST. From then -> reject

// { Error: Request failed with status code 422
//   at createError (/Users/kioannou/Projects/Vivante/nutrition-gateway/node_modules/axios/lib/core/createError.js:16:15)
//   at settle (/Users/kioannou/Projects/Vivante/nutrition-gateway/node_modules/axios/lib/core/settle.js:18:12)
//   at IncomingMessage.handleStreamEnd (/Users/kioannou/Projects/Vivante/nutrition-gateway/node_modules/axios/lib/adapters/http.js:201:11)
//   at emitNone (events.js:111:20)
//   at IncomingMessage.emit (events.js:208:7)
//   at endReadableNT (_stream_readable.js:1064:12)
//   at _combinedTickCallback (internal/process/next_tick.js:138:11)
//   at process._tickCallback (internal/process/next_tick.js:180:9)
//   config:
//   { adapter: [Function: httpAdapter],
//     transformRequest: { '0': [Function: transformRequest] },
//     transformResponse: { '0': [Function: transformResponse] },
//     timeout: 0,
//       xsrfCookieName: 'XSRF-TOKEN',
//     xsrfHeaderName: 'X-XSRF-TOKEN',
//     maxContentLength: -1,
//     validateStatus: [Function: validateStatus],
//     headers:
//     { Accept: 'application/json, text/plain, */*',
//       'Content-Type': 'application/json;charset=utf-8',
//       'User-Agent': 'axios/0.18.0',
//       'Content-Length': 247 },
//     method: 'post',
//       baseURL: 'http://localhost:8086/',
//     url: 'http://localhost:8086/FoodLog',
//     data: '{"data":{"type":"FoodLog","attributes":{"partOfDay":"EVENING"},"relationships":{"Food":{"data":{"type":"VivanteHealthFood","id":"b6067742-fd48-47cd-8800-d74337b08f10"}},"User":{"data":{"id":"92be8b56-b0f8-42cd-a667-2941df6824c9","type":"User"}}}}}' },
//   request:
//     ClientRequest {
//   domain: null,
//     _events:
//   { socket: [Function],
//     abort: [Function],
//     aborted: [Function],
//     error: [Function],
//     timeout: [Function],
//     prefinish: [Function: requestOnPrefinish] },
//   _eventsCount: 6,
//     _maxListeners: undefined,
//     output: [],
//     outputEncodings: [],
//     outputCallbacks: [],
//     outputSize: 0,
//     writable: true,
//     _last: true,
//     upgrading: false,
//     chunkedEncoding: false,
//     shouldKeepAlive: false,
//     useChunkedEncodingByDefault: true,
//     sendDate: false,
//     _removedConnection: false,
//     _removedContLen: false,
//     _removedTE: false,
//     _contentLength: null,
//     _hasBody: true,
//     _trailer: '',
//     finished: true,
//     _headerSent: true,
//     socket:
//   Socket {
//     connecting: false,
//       _hadError: false,
//       _handle: null,
//       _parent: null,
//       _host: 'localhost',
//       _readableState:
//     ReadableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         buffer: BufferList { head: null, tail: null, length: 0 },
//       length: 0,
//         pipes: null,
//         pipesCount: 0,
//         flowing: true,
//         ended: false,
//         endEmitted: false,
//         reading: true,
//         sync: false,
//         needReadable: true,
//         emittedReadable: false,
//         readableListening: false,
//         resumeScheduled: false,
//         destroyed: true,
//         defaultEncoding: 'utf8',
//         awaitDrain: 0,
//         readingMore: false,
//         decoder: null,
//         encoding: null },
//     readable: false,
//       domain: null,
//       _events:
//     { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//       finish: [Function: onSocketFinish],
//       _socketEnd: [Function: onSocketEnd],
//       free: [Function: onFree],
//       close: [ [Function: onClose], [Function: socketCloseListener] ],
//       agentRemove: [Function: onRemove],
//       drain: [Function: ondrain],
//       error: [Function: socketErrorListener] },
//     _eventsCount: 8,
//       _maxListeners: undefined,
//       _writableState:
//     WritableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         finalCalled: false,
//         needDrain: false,
//         ending: true,
//         ended: true,
//         finished: true,
//         destroyed: true,
//         decodeStrings: false,
//         defaultEncoding: 'utf8',
//         length: 0,
//         writing: false,
//         corked: 0,
//         sync: false,
//         bufferProcessing: false,
//         onwrite: [Function: bound onwrite],
//       writecb: null,
//         writelen: 0,
//         bufferedRequest: null,
//         lastBufferedRequest: null,
//         pendingcb: 0,
//         prefinished: true,
//         errorEmitted: false,
//         bufferedRequestCount: 0,
//         corkedRequestsFree:
//       { next:
//       { next: null,
//         entry: null,
//         finish: [Function: bound onCorkedFinish] },
//         entry: null,
//           finish: [Function: bound onCorkedFinish] } },
//     writable: false,
//       allowHalfOpen: false,
//       _bytesDispatched: 450,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: null,
//       _server: null,
//       parser: null,
//       _httpMessage: [Circular],
//       read: [Function],
//       _consuming: true,
//       _idleNext: null,
//       _idlePrev: null,
//       _idleTimeout: -1,
//       [Symbol(asyncId)]: 166,
//       [Symbol(bytesRead)]: 450 },
//   connection:
//     Socket {
//     connecting: false,
//       _hadError: false,
//       _handle: null,
//       _parent: null,
//       _host: 'localhost',
//       _readableState:
//     ReadableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         buffer: BufferList { head: null, tail: null, length: 0 },
//       length: 0,
//         pipes: null,
//         pipesCount: 0,
//         flowing: true,
//         ended: false,
//         endEmitted: false,
//         reading: true,
//         sync: false,
//         needReadable: true,
//         emittedReadable: false,
//         readableListening: false,
//         resumeScheduled: false,
//         destroyed: true,
//         defaultEncoding: 'utf8',
//         awaitDrain: 0,
//         readingMore: false,
//         decoder: null,
//         encoding: null },
//     readable: false,
//       domain: null,
//       _events:
//     { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//       finish: [Function: onSocketFinish],
//       _socketEnd: [Function: onSocketEnd],
//       free: [Function: onFree],
//       close: [ [Function: onClose], [Function: socketCloseListener] ],
//       agentRemove: [Function: onRemove],
//       drain: [Function: ondrain],
//       error: [Function: socketErrorListener] },
//     _eventsCount: 8,
//       _maxListeners: undefined,
//       _writableState:
//     WritableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         finalCalled: false,
//         needDrain: false,
//         ending: true,
//         ended: true,
//         finished: true,
//         destroyed: true,
//         decodeStrings: false,
//         defaultEncoding: 'utf8',
//         length: 0,
//         writing: false,
//         corked: 0,
//         sync: false,
//         bufferProcessing: false,
//         onwrite: [Function: bound onwrite],
//       writecb: null,
//         writelen: 0,
//         bufferedRequest: null,
//         lastBufferedRequest: null,
//         pendingcb: 0,
//         prefinished: true,
//         errorEmitted: false,
//         bufferedRequestCount: 0,
//         corkedRequestsFree:
//       { next:
//       { next: null,
//         entry: null,
//         finish: [Function: bound onCorkedFinish] },
//         entry: null,
//           finish: [Function: bound onCorkedFinish] } },
//     writable: false,
//       allowHalfOpen: false,
//       _bytesDispatched: 450,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: null,
//       _server: null,
//       parser: null,
//       _httpMessage: [Circular],
//       read: [Function],
//       _consuming: true,
//       _idleNext: null,
//       _idlePrev: null,
//       _idleTimeout: -1,
//       [Symbol(asyncId)]: 166,
//       [Symbol(bytesRead)]: 450 },
//   _header: 'POST /FoodLog HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/json;charset=utf-8\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 247\r\nHost: localhost:8086\r\nConnection: close\r\n\r\n',
//     _onPendingData: [Function: noopPendingOutput],
//   agent:
//     Agent {
//     domain: null,
//       _events: { free: [Function] },
//     _eventsCount: 1,
//       _maxListeners: undefined,
//       defaultPort: 80,
//       protocol: 'http:',
//       options: { path: null },
//     requests: {},
//     sockets:
//     { 'localhost:8086:':
//       [ Socket {
//         connecting: false,
//         _hadError: false,
//         _handle: null,
//         _parent: null,
//         _host: 'localhost',
//         _readableState:
//         ReadableState {
//         objectMode: false,
//         highWaterMark: 16384,
//         buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//       pipes: null,
//       pipesCount: 0,
//       flowing: true,
//       ended: false,
//       endEmitted: false,
//       reading: true,
//       sync: false,
//       needReadable: true,
//       emittedReadable: false,
//       readableListening: false,
//       resumeScheduled: false,
//       destroyed: true,
//       defaultEncoding: 'utf8',
//       awaitDrain: 0,
//       readingMore: false,
//       decoder: null,
//       encoding: null },
//       readable: false,
//         domain: null,
//       _events:
//       { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//         finish: [Function: onSocketFinish],
//         _socketEnd: [Function: onSocketEnd],
//         free: [Function: onFree],
//         close: [ [Function: onClose], [Function: socketCloseListener] ],
//         agentRemove: [Function: onRemove],
//         drain: [Function: ondrain],
//         error: [Function: socketErrorListener] },
//       _eventsCount: 8,
//         _maxListeners: undefined,
//       _writableState:
//       WritableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         finalCalled: false,
//         needDrain: false,
//         ending: true,
//         ended: true,
//         finished: true,
//         destroyed: true,
//         decodeStrings: false,
//         defaultEncoding: 'utf8',
//         length: 0,
//         writing: false,
//         corked: 0,
//         sync: false,
//         bufferProcessing: false,
//         onwrite: [Function: bound onwrite],
//       writecb: null,
//         writelen: 0,
//         bufferedRequest: null,
//         lastBufferedRequest: null,
//         pendingcb: 0,
//         prefinished: true,
//         errorEmitted: false,
//         bufferedRequestCount: 0,
//         corkedRequestsFree:
//       { next:
//       { next: null,
//         entry: null,
//         finish: [Function: bound onCorkedFinish] },
//         entry: null,
//           finish: [Function: bound onCorkedFinish] } },
//       writable: false,
//         allowHalfOpen: false,
//       _bytesDispatched: 450,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: null,
//       _server: null,
//       parser: null,
//       _httpMessage: [Circular],
//       read: [Function],
//       _consuming: true,
//       _idleNext: null,
//       _idlePrev: null,
//       _idleTimeout: -1,
//       [Symbol(asyncId)]: 166,
//       [Symbol(bytesRead)]: 450 } ] },
//     freeSockets: {},
//     keepAliveMsecs: 1000,
//       keepAlive: false,
//       maxSockets: Infinity,
//       maxFreeSockets: 256 },
//   socketPath: undefined,
//     timeout: undefined,
//     method: 'POST',
//     path: '/FoodLog',
//     _ended: true,
//     res:
//   IncomingMessage {
//     _readableState:
//       ReadableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         buffer: BufferList { head: null, tail: null, length: 0 },
//       length: 0,
//         pipes: null,
//         pipesCount: 0,
//         flowing: true,
//         ended: true,
//         endEmitted: true,
//         reading: false,
//         sync: true,
//         needReadable: false,
//         emittedReadable: false,
//         readableListening: false,
//         resumeScheduled: false,
//         destroyed: false,
//         defaultEncoding: 'utf8',
//         awaitDrain: 0,
//         readingMore: false,
//         decoder: null,
//         encoding: null },
//     readable: false,
//       domain: null,
//       _events:
//     { end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
//       data: [Function: handleStreamData],
//       error: [Function: handleStreamError] },
//     _eventsCount: 3,
//       _maxListeners: undefined,
//       socket:
//     Socket {
//       connecting: false,
//         _hadError: false,
//         _handle: null,
//         _parent: null,
//         _host: 'localhost',
//         _readableState:
//       ReadableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//           pipes: null,
//           pipesCount: 0,
//           flowing: true,
//           ended: false,
//           endEmitted: false,
//           reading: true,
//           sync: false,
//           needReadable: true,
//           emittedReadable: false,
//           readableListening: false,
//           resumeScheduled: false,
//           destroyed: true,
//           defaultEncoding: 'utf8',
//           awaitDrain: 0,
//           readingMore: false,
//           decoder: null,
//           encoding: null },
//       readable: false,
//         domain: null,
//         _events:
//       { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//         finish: [Function: onSocketFinish],
//         _socketEnd: [Function: onSocketEnd],
//         free: [Function: onFree],
//         close: [ [Function: onClose], [Function: socketCloseListener] ],
//         agentRemove: [Function: onRemove],
//         drain: [Function: ondrain],
//         error: [Function: socketErrorListener] },
//       _eventsCount: 8,
//         _maxListeners: undefined,
//         _writableState:
//       WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: true,
//           ended: true,
//           finished: true,
//           destroyed: true,
//           decodeStrings: false,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: false,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: true,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] },
//           entry: null,
//             finish: [Function: bound onCorkedFinish] } },
//       writable: false,
//         allowHalfOpen: false,
//         _bytesDispatched: 450,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: null,
//         _server: null,
//         parser: null,
//         _httpMessage: [Circular],
//         read: [Function],
//         _consuming: true,
//         _idleNext: null,
//         _idlePrev: null,
//         _idleTimeout: -1,
//         [Symbol(asyncId)]: 166,
//         [Symbol(bytesRead)]: 450 },
//     connection:
//       Socket {
//       connecting: false,
//         _hadError: false,
//         _handle: null,
//         _parent: null,
//         _host: 'localhost',
//         _readableState:
//       ReadableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//           pipes: null,
//           pipesCount: 0,
//           flowing: true,
//           ended: false,
//           endEmitted: false,
//           reading: true,
//           sync: false,
//           needReadable: true,
//           emittedReadable: false,
//           readableListening: false,
//           resumeScheduled: false,
//           destroyed: true,
//           defaultEncoding: 'utf8',
//           awaitDrain: 0,
//           readingMore: false,
//           decoder: null,
//           encoding: null },
//       readable: false,
//         domain: null,
//         _events:
//       { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//         finish: [Function: onSocketFinish],
//         _socketEnd: [Function: onSocketEnd],
//         free: [Function: onFree],
//         close: [ [Function: onClose], [Function: socketCloseListener] ],
//         agentRemove: [Function: onRemove],
//         drain: [Function: ondrain],
//         error: [Function: socketErrorListener] },
//       _eventsCount: 8,
//         _maxListeners: undefined,
//         _writableState:
//       WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: true,
//           ended: true,
//           finished: true,
//           destroyed: true,
//           decodeStrings: false,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: false,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: true,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] },
//           entry: null,
//             finish: [Function: bound onCorkedFinish] } },
//       writable: false,
//         allowHalfOpen: false,
//         _bytesDispatched: 450,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: null,
//         _server: null,
//         parser: null,
//         _httpMessage: [Circular],
//         read: [Function],
//         _consuming: true,
//         _idleNext: null,
//         _idlePrev: null,
//         _idleTimeout: -1,
//         [Symbol(asyncId)]: 166,
//         [Symbol(bytesRead)]: 450 },
//     httpVersionMajor: 1,
//       httpVersionMinor: 1,
//       httpVersion: '1.1',
//       complete: true,
//       headers:
//     { date: 'Thu, 13 Dec 2018 22:31:27 GMT',
//       server: 'Apache/2.4.35 (Unix)',
//       'x-powered-by': 'PHP/7.2.10',
//       connection: 'close',
//       'transfer-encoding': 'chunked',
//       'content-type': 'application/vnd.api+json' },
//     rawHeaders:
//       [ 'Date',
//         'Thu, 13 Dec 2018 22:31:27 GMT',
//         'Server',
//         'Apache/2.4.35 (Unix)',
//         'X-Powered-By',
//         'PHP/7.2.10',
//         'Connection',
//         'close',
//         'Transfer-Encoding',
//         'chunked',
//         'Content-Type',
//         'application/vnd.api+json' ],
//         trailers: {},
//     rawTrailers: [],
//       upgrade: false,
//       url: '',
//       method: null,
//       statusCode: 422,
//       statusMessage: 'Unprocessable Entity',
//       client:
//     Socket {
//       connecting: false,
//         _hadError: false,
//         _handle: null,
//         _parent: null,
//         _host: 'localhost',
//         _readableState:
//       ReadableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//           pipes: null,
//           pipesCount: 0,
//           flowing: true,
//           ended: false,
//           endEmitted: false,
//           reading: true,
//           sync: false,
//           needReadable: true,
//           emittedReadable: false,
//           readableListening: false,
//           resumeScheduled: false,
//           destroyed: true,
//           defaultEncoding: 'utf8',
//           awaitDrain: 0,
//           readingMore: false,
//           decoder: null,
//           encoding: null },
//       readable: false,
//         domain: null,
//         _events:
//       { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//         finish: [Function: onSocketFinish],
//         _socketEnd: [Function: onSocketEnd],
//         free: [Function: onFree],
//         close: [ [Function: onClose], [Function: socketCloseListener] ],
//         agentRemove: [Function: onRemove],
//         drain: [Function: ondrain],
//         error: [Function: socketErrorListener] },
//       _eventsCount: 8,
//         _maxListeners: undefined,
//         _writableState:
//       WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: true,
//           ended: true,
//           finished: true,
//           destroyed: true,
//           decodeStrings: false,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: false,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: true,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] },
//           entry: null,
//             finish: [Function: bound onCorkedFinish] } },
//       writable: false,
//         allowHalfOpen: false,
//         _bytesDispatched: 450,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: null,
//         _server: null,
//         parser: null,
//         _httpMessage: [Circular],
//         read: [Function],
//         _consuming: true,
//         _idleNext: null,
//         _idlePrev: null,
//         _idleTimeout: -1,
//         [Symbol(asyncId)]: 166,
//         [Symbol(bytesRead)]: 450 },
//     _consuming: true,
//       _dumped: false,
//       req: [Circular],
//       responseUrl: 'http://localhost:8086/FoodLog',
//       redirects: [],
//       read: [Function] },
//   aborted: undefined,
//     timeoutCb: null,
//     upgradeOrConnect: false,
//     parser: null,
//     maxHeadersCount: null,
//     _redirectable:
//   Writable {
//     _writableState:
//       WritableState {
//       objectMode: false,
//         highWaterMark: 16384,
//         finalCalled: false,
//         needDrain: false,
//         ending: false,
//         ended: false,
//         finished: false,
//         destroyed: false,
//         decodeStrings: true,
//         defaultEncoding: 'utf8',
//         length: 0,
//         writing: false,
//         corked: 0,
//         sync: true,
//         bufferProcessing: false,
//         onwrite: [Function: bound onwrite],
//       writecb: null,
//         writelen: 0,
//         bufferedRequest: null,
//         lastBufferedRequest: null,
//         pendingcb: 0,
//         prefinished: false,
//         errorEmitted: false,
//         bufferedRequestCount: 0,
//         corkedRequestsFree:
//       { next: null,
//         entry: null,
//         finish: [Function: bound onCorkedFinish] } },
//     writable: true,
//       domain: null,
//       _events:
//     { response: [Function: handleResponse],
//       error: [Function: handleRequestError] },
//     _eventsCount: 2,
//       _maxListeners: undefined,
//       _options:
//     { protocol: 'http:',
//       maxRedirects: 21,
//       maxBodyLength: 10485760,
//       path: '/FoodLog',
//       method: 'post',
//       headers:
//       { Accept: 'application/json, text/plain, */*',
//         'Content-Type': 'application/json;charset=utf-8',
//         'User-Agent': 'axios/0.18.0',
//         'Content-Length': 247 },
//       agent: undefined,
//         auth: undefined,
//       hostname: 'localhost',
//       port: '8086',
//       nativeProtocols:
//       { 'http:':
//         { _connectionListener: [Function: connectionListener],
//           METHODS:
//             [ 'ACL',
//               'BIND',
//               'CHECKOUT',
//               'CONNECT',
//               'COPY',
//               'DELETE',
//               'GET',
//               'HEAD',
//               'LINK',
//               'LOCK',
//               'M-SEARCH',
//               'MERGE',
//               'MKACTIVITY',
//               'MKCALENDAR',
//               'MKCOL',
//               'MOVE',
//               'NOTIFY',
//               'OPTIONS',
//               'PATCH',
//               'POST',
//               'PROPFIND',
//               'PROPPATCH',
//               'PURGE',
//               'PUT',
//               'REBIND',
//               'REPORT',
//               'SEARCH',
//               'SOURCE',
//               'SUBSCRIBE',
//               'TRACE',
//               'UNBIND',
//               'UNLINK',
//               'UNLOCK',
//               'UNSUBSCRIBE' ],
//               STATUS_CODES:
//           { '100': 'Continue',
//             '101': 'Switching Protocols',
//             '102': 'Processing',
//             '200': 'OK',
//             '201': 'Created',
//             '202': 'Accepted',
//             '203': 'Non-Authoritative Information',
//             '204': 'No Content',
//             '205': 'Reset Content',
//             '206': 'Partial Content',
//             '207': 'Multi-Status',
//             '208': 'Already Reported',
//             '226': 'IM Used',
//             '300': 'Multiple Choices',
//             '301': 'Moved Permanently',
//             '302': 'Found',
//             '303': 'See Other',
//             '304': 'Not Modified',
//             '305': 'Use Proxy',
//             '307': 'Temporary Redirect',
//             '308': 'Permanent Redirect',
//             '400': 'Bad Request',
//             '401': 'Unauthorized',
//             '402': 'Payment Required',
//             '403': 'Forbidden',
//             '404': 'Not Found',
//             '405': 'Method Not Allowed',
//             '406': 'Not Acceptable',
//             '407': 'Proxy Authentication Required',
//             '408': 'Request Timeout',
//             '409': 'Conflict',
//             '410': 'Gone',
//             '411': 'Length Required',
//             '412': 'Precondition Failed',
//             '413': 'Payload Too Large',
//             '414': 'URI Too Long',
//             '415': 'Unsupported Media Type',
//             '416': 'Range Not Satisfiable',
//             '417': 'Expectation Failed',
//             '418': 'I\'m a teapot',
//             '421': 'Misdirected Request',
//             '422': 'Unprocessable Entity',
//             '423': 'Locked',
//             '424': 'Failed Dependency',
//             '425': 'Unordered Collection',
//             '426': 'Upgrade Required',
//             '428': 'Precondition Required',
//             '429': 'Too Many Requests',
//             '431': 'Request Header Fields Too Large',
//             '451': 'Unavailable For Legal Reasons',
//             '500': 'Internal Server Error',
//             '501': 'Not Implemented',
//             '502': 'Bad Gateway',
//             '503': 'Service Unavailable',
//             '504': 'Gateway Timeout',
//             '505': 'HTTP Version Not Supported',
//             '506': 'Variant Also Negotiates',
//             '507': 'Insufficient Storage',
//             '508': 'Loop Detected',
//             '509': 'Bandwidth Limit Exceeded',
//             '510': 'Not Extended',
//             '511': 'Network Authentication Required' },
//           Agent:
//           { [Function: Agent]
//             super_:
//             { [Function: EventEmitter]
//               EventEmitter: [Circular],
//                 usingDomains: false,
//               defaultMaxListeners: [Getter/Setter],
//               init: [Function],
//               listenerCount: [Function] },
//             defaultMaxSockets: Infinity },
//           ClientRequest:
//           { [Function: ClientRequest]
//             super_:
//             { [Function: OutgoingMessage]
//               super_:
//               { [Function: Stream]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] },
//                 Readable:
//                 { [Function: Readable]
//                   ReadableState: [Function: ReadableState],
//                   super_: [Circular],
//                     _fromList: [Function: fromList] },
//                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                 Duplex:
//                 { [Function: Duplex]
//                   super_:
//                   { [Function: Readable]
//                     ReadableState: [Function: ReadableState],
//                     super_: [Circular],
//                       _fromList: [Function: fromList] } },
//                 Transform:
//                 { [Function: Transform]
//                   super_:
//                   { [Function: Duplex]
//                     super_:
//                     { [Function: Readable]
//                       ReadableState: [Function: ReadableState],
//                       super_: [Circular],
//                         _fromList: [Function: fromList] } } },
//                 PassThrough:
//                 { [Function: PassThrough]
//                   super_:
//                   { [Function: Transform]
//                     super_:
//                     { [Function: Duplex]
//                       super_:
//                       { [Function: Readable]
//                         ReadableState: [Function: ReadableState],
//                         super_: [Circular],
//                           _fromList: [Function: fromList] } } } },
//                 Stream: [Circular],
//                   _isUint8Array: [Function: isUint8Array],
//                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
//           globalAgent:
//             Agent {
//           domain: null,
//             _events: { free: [Function] },
//           _eventsCount: 1,
//             _maxListeners: undefined,
//             defaultPort: 80,
//             protocol: 'http:',
//             options: { path: null },
//           requests: {},
//           sockets:
//           { 'localhost:8086:':
//             [ Socket {
//               connecting: false,
//               _hadError: false,
//               _handle: null,
//               _parent: null,
//               _host: 'localhost',
//               _readableState:
//               ReadableState {
//               objectMode: false,
//               highWaterMark: 16384,
//               buffer: BufferList { head: null, tail: null, length: 0 },
//               length: 0,
//             pipes: null,
//             pipesCount: 0,
//             flowing: true,
//             ended: false,
//             endEmitted: false,
//             reading: true,
//             sync: false,
//             needReadable: true,
//             emittedReadable: false,
//             readableListening: false,
//             resumeScheduled: false,
//             destroyed: true,
//             defaultEncoding: 'utf8',
//             awaitDrain: 0,
//             readingMore: false,
//             decoder: null,
//             encoding: null },
//             readable: false,
//               domain: null,
//             _events:
//             { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//               finish: [Function: onSocketFinish],
//               _socketEnd: [Function: onSocketEnd],
//               free: [Function: onFree],
//               close: [ [Function: onClose], [Function: socketCloseListener] ],
//               agentRemove: [Function: onRemove],
//               drain: [Function: ondrain],
//               error: [Function: socketErrorListener] },
//             _eventsCount: 8,
//               _maxListeners: undefined,
//             _writableState:
//             WritableState {
//             objectMode: false,
//               highWaterMark: 16384,
//               finalCalled: false,
//               needDrain: false,
//               ending: true,
//               ended: true,
//               finished: true,
//               destroyed: true,
//               decodeStrings: false,
//               defaultEncoding: 'utf8',
//               length: 0,
//               writing: false,
//               corked: 0,
//               sync: false,
//               bufferProcessing: false,
//               onwrite: [Function: bound onwrite],
//             writecb: null,
//               writelen: 0,
//               bufferedRequest: null,
//               lastBufferedRequest: null,
//               pendingcb: 0,
//               prefinished: true,
//               errorEmitted: false,
//               bufferedRequestCount: 0,
//               corkedRequestsFree:
//             { next:
//             { next: null,
//               entry: null,
//               finish: [Function: bound onCorkedFinish] },
//               entry: null,
//                 finish: [Function: bound onCorkedFinish] } },
//             writable: false,
//               allowHalfOpen: false,
//             _bytesDispatched: 450,
//             _sockname: null,
//             _pendingData: null,
//             _pendingEncoding: '',
//             server: null,
//             _server: null,
//             parser: null,
//             _httpMessage: [Circular],
//             read: [Function],
//             _consuming: true,
//             _idleNext: null,
//             _idlePrev: null,
//             _idleTimeout: -1,
//             [Symbol(asyncId)]: 166,
//             [Symbol(bytesRead)]: 450 } ] },
//           freeSockets: {},
//           keepAliveMsecs: 1000,
//             keepAlive: false,
//             maxSockets: Infinity,
//             maxFreeSockets: 256 },
//           IncomingMessage:
//           { [Function: IncomingMessage]
//             super_:
//             { [Function: Readable]
//               ReadableState: [Function: ReadableState],
//               super_:
//               { [Function: Stream]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] },
//                 Readable: [Circular],
//                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                 Duplex: { [Function: Duplex] super_: [Circular] },
//                 Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
//                 PassThrough:
//                 { [Function: PassThrough]
//                   super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
//                 Stream: [Circular],
//                   _isUint8Array: [Function: isUint8Array],
//                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
//               _fromList: [Function: fromList] } },
//           OutgoingMessage:
//           { [Function: OutgoingMessage]
//             super_:
//             { [Function: Stream]
//               super_:
//               { [Function: EventEmitter]
//                 EventEmitter: [Circular],
//                   usingDomains: false,
//                 defaultMaxListeners: [Getter/Setter],
//                 init: [Function],
//                 listenerCount: [Function] },
//               Readable:
//               { [Function: Readable]
//                 ReadableState: [Function: ReadableState],
//                 super_: [Circular],
//                   _fromList: [Function: fromList] },
//               Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//               Duplex:
//               { [Function: Duplex]
//                 super_:
//                 { [Function: Readable]
//                   ReadableState: [Function: ReadableState],
//                   super_: [Circular],
//                     _fromList: [Function: fromList] } },
//               Transform:
//               { [Function: Transform]
//                 super_:
//                 { [Function: Duplex]
//                   super_:
//                   { [Function: Readable]
//                     ReadableState: [Function: ReadableState],
//                     super_: [Circular],
//                       _fromList: [Function: fromList] } } },
//               PassThrough:
//               { [Function: PassThrough]
//                 super_:
//                 { [Function: Transform]
//                   super_:
//                   { [Function: Duplex]
//                     super_:
//                     { [Function: Readable]
//                       ReadableState: [Function: ReadableState],
//                       super_: [Circular],
//                         _fromList: [Function: fromList] } } } },
//               Stream: [Circular],
//                 _isUint8Array: [Function: isUint8Array],
//               _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } },
//           Server:
//           { [Function: Server]
//             super_:
//             { [Function: Server]
//               super_:
//               { [Function: EventEmitter]
//                 EventEmitter: [Circular],
//                   usingDomains: false,
//                 defaultMaxListeners: [Getter/Setter],
//                 init: [Function],
//                 listenerCount: [Function] } } },
//           ServerResponse:
//           { [Function: ServerResponse]
//             super_:
//             { [Function: OutgoingMessage]
//               super_:
//               { [Function: Stream]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] },
//                 Readable:
//                 { [Function: Readable]
//                   ReadableState: [Function: ReadableState],
//                   super_: [Circular],
//                     _fromList: [Function: fromList] },
//                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                 Duplex:
//                 { [Function: Duplex]
//                   super_:
//                   { [Function: Readable]
//                     ReadableState: [Function: ReadableState],
//                     super_: [Circular],
//                       _fromList: [Function: fromList] } },
//                 Transform:
//                 { [Function: Transform]
//                   super_:
//                   { [Function: Duplex]
//                     super_:
//                     { [Function: Readable]
//                       ReadableState: [Function: ReadableState],
//                       super_: [Circular],
//                         _fromList: [Function: fromList] } } },
//                 PassThrough:
//                 { [Function: PassThrough]
//                   super_:
//                   { [Function: Transform]
//                     super_:
//                     { [Function: Duplex]
//                       super_:
//                       { [Function: Readable]
//                         ReadableState: [Function: ReadableState],
//                         super_: [Circular],
//                           _fromList: [Function: fromList] } } } },
//                 Stream: [Circular],
//                   _isUint8Array: [Function: isUint8Array],
//                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
//           createServer: [Function: createServer],
//           get: [Function: get],
//           request: [Function: request] },
//         'https:':
//         { Server:
//         { [Function: Server]
//           super_:
//           { [Function: Server]
//             super_:
//             { [Function: Server]
//               super_:
//               { [Function: EventEmitter]
//                 EventEmitter: [Circular],
//                   usingDomains: false,
//                 defaultMaxListeners: [Getter/Setter],
//                 init: [Function],
//                 listenerCount: [Function] } } } },
//           createServer: [Function: createServer],
//           globalAgent:
//             Agent {
//           domain: null,
//             _events: { free: [Function] },
//           _eventsCount: 1,
//             _maxListeners: undefined,
//             defaultPort: 443,
//             protocol: 'https:',
//             options: { path: null },
//           requests: {},
//           sockets: {},
//           freeSockets: {},
//           keepAliveMsecs: 1000,
//             keepAlive: false,
//             maxSockets: Infinity,
//             maxFreeSockets: 256,
//             maxCachedSessions: 100,
//             _sessionCache:
//           { map:
//           { 'app.datadoghq.com:443:::::::::': <Buffer 30 82 06 9a 02 01 01 02 02 03 03 04 02 c0 2f 04 20 89 d6 f6 39 85 f8 50 62 78 17 a2 63 69 21 6c de 93 95 04 ce 92 ee 4f bf 88 2b 5e f7 5c d8 70 47 04 ... > },
//             list: [ 'app.datadoghq.com:443:::::::::' ] } },
//           Agent:
//           { [Function: Agent]
//             super_:
//             { [Function: Agent]
//               super_:
//               { [Function: EventEmitter]
//                 EventEmitter: [Circular],
//                   usingDomains: false,
//                 defaultMaxListeners: [Getter/Setter],
//                 init: [Function],
//                 listenerCount: [Function] },
//               defaultMaxSockets: Infinity } },
//           request: [Function: request],
//           get: [Function: get] } },
//       pathname: '/FoodLog' },
//     _redirectCount: 0,
//       _redirects: [],
//       _requestBodyLength: 247,
//       _requestBodyBuffers: [],
//       _onNativeResponse: [Function],
//       _currentRequest: [Circular],
//       _currentUrl: 'http://localhost:8086/FoodLog' },
//   [Symbol(outHeadersKey)]:
//   { accept: [ 'Accept', 'application/json, text/plain, */*' ],
//     'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
//     'user-agent': [ 'User-Agent', 'axios/0.18.0' ],
//     'content-length': [ 'Content-Length', 247 ],
//     host: [ 'Host', 'localhost:8086' ] } },
//   response:
//   { status: 422,
//     statusText: 'Unprocessable Entity',
//     headers:
//     { date: 'Thu, 13 Dec 2018 22:31:27 GMT',
//       server: 'Apache/2.4.35 (Unix)',
//       'x-powered-by': 'PHP/7.2.10',
//       connection: 'close',
//       'transfer-encoding': 'chunked',
//       'content-type': 'application/vnd.api+json' },
//     config:
//     { adapter: [Function: httpAdapter],
//       transformRequest: { '0': [Function: transformRequest] },
//       transformResponse: { '0': [Function: transformResponse] },
//       timeout: 0,
//         xsrfCookieName: 'XSRF-TOKEN',
//       xsrfHeaderName: 'X-XSRF-TOKEN',
//       maxContentLength: -1,
//       validateStatus: [Function: validateStatus],
//       headers:
//       { Accept: 'application/json, text/plain, */*',
//         'Content-Type': 'application/json;charset=utf-8',
//         'User-Agent': 'axios/0.18.0',
//         'Content-Length': 247 },
//       method: 'post',
//         baseURL: 'http://localhost:8086/',
//       url: 'http://localhost:8086/FoodLog',
//       data: '{"data":{"type":"FoodLog","attributes":{"partOfDay":"EVENING"},"relationships":{"Food":{"data":{"type":"VivanteHealthFood","id":"b6067742-fd48-47cd-8800-d74337b08f10"}},"User":{"data":{"id":"92be8b56-b0f8-42cd-a667-2941df6824c9","type":"User"}}}}}' },
//     request:
//       ClientRequest {
//     domain: null,
//       _events:
//     { socket: [Function],
//       abort: [Function],
//       aborted: [Function],
//       error: [Function],
//       timeout: [Function],
//       prefinish: [Function: requestOnPrefinish] },
//     _eventsCount: 6,
//       _maxListeners: undefined,
//       output: [],
//       outputEncodings: [],
//       outputCallbacks: [],
//       outputSize: 0,
//       writable: true,
//       _last: true,
//       upgrading: false,
//       chunkedEncoding: false,
//       shouldKeepAlive: false,
//       useChunkedEncodingByDefault: true,
//       sendDate: false,
//       _removedConnection: false,
//       _removedContLen: false,
//       _removedTE: false,
//       _contentLength: null,
//       _hasBody: true,
//       _trailer: '',
//       finished: true,
//       _headerSent: true,
//       socket:
//     Socket {
//       connecting: false,
//         _hadError: false,
//         _handle: null,
//         _parent: null,
//         _host: 'localhost',
//         _readableState:
//       ReadableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//           pipes: null,
//           pipesCount: 0,
//           flowing: true,
//           ended: false,
//           endEmitted: false,
//           reading: true,
//           sync: false,
//           needReadable: true,
//           emittedReadable: false,
//           readableListening: false,
//           resumeScheduled: false,
//           destroyed: true,
//           defaultEncoding: 'utf8',
//           awaitDrain: 0,
//           readingMore: false,
//           decoder: null,
//           encoding: null },
//       readable: false,
//         domain: null,
//         _events:
//       { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//         finish: [Function: onSocketFinish],
//         _socketEnd: [Function: onSocketEnd],
//         free: [Function: onFree],
//         close: [ [Function: onClose], [Function: socketCloseListener] ],
//         agentRemove: [Function: onRemove],
//         drain: [Function: ondrain],
//         error: [Function: socketErrorListener] },
//       _eventsCount: 8,
//         _maxListeners: undefined,
//         _writableState:
//       WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: true,
//           ended: true,
//           finished: true,
//           destroyed: true,
//           decodeStrings: false,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: false,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: true,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] },
//           entry: null,
//             finish: [Function: bound onCorkedFinish] } },
//       writable: false,
//         allowHalfOpen: false,
//         _bytesDispatched: 450,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: null,
//         _server: null,
//         parser: null,
//         _httpMessage: [Circular],
//         read: [Function],
//         _consuming: true,
//         _idleNext: null,
//         _idlePrev: null,
//         _idleTimeout: -1,
//         [Symbol(asyncId)]: 166,
//         [Symbol(bytesRead)]: 450 },
//     connection:
//       Socket {
//       connecting: false,
//         _hadError: false,
//         _handle: null,
//         _parent: null,
//         _host: 'localhost',
//         _readableState:
//       ReadableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//           pipes: null,
//           pipesCount: 0,
//           flowing: true,
//           ended: false,
//           endEmitted: false,
//           reading: true,
//           sync: false,
//           needReadable: true,
//           emittedReadable: false,
//           readableListening: false,
//           resumeScheduled: false,
//           destroyed: true,
//           defaultEncoding: 'utf8',
//           awaitDrain: 0,
//           readingMore: false,
//           decoder: null,
//           encoding: null },
//       readable: false,
//         domain: null,
//         _events:
//       { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//         finish: [Function: onSocketFinish],
//         _socketEnd: [Function: onSocketEnd],
//         free: [Function: onFree],
//         close: [ [Function: onClose], [Function: socketCloseListener] ],
//         agentRemove: [Function: onRemove],
//         drain: [Function: ondrain],
//         error: [Function: socketErrorListener] },
//       _eventsCount: 8,
//         _maxListeners: undefined,
//         _writableState:
//       WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: true,
//           ended: true,
//           finished: true,
//           destroyed: true,
//           decodeStrings: false,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: false,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: true,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] },
//           entry: null,
//             finish: [Function: bound onCorkedFinish] } },
//       writable: false,
//         allowHalfOpen: false,
//         _bytesDispatched: 450,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: null,
//         _server: null,
//         parser: null,
//         _httpMessage: [Circular],
//         read: [Function],
//         _consuming: true,
//         _idleNext: null,
//         _idlePrev: null,
//         _idleTimeout: -1,
//         [Symbol(asyncId)]: 166,
//         [Symbol(bytesRead)]: 450 },
//     _header: 'POST /FoodLog HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/json;charset=utf-8\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 247\r\nHost: localhost:8086\r\nConnection: close\r\n\r\n',
//       _onPendingData: [Function: noopPendingOutput],
//     agent:
//       Agent {
//       domain: null,
//         _events: { free: [Function] },
//       _eventsCount: 1,
//         _maxListeners: undefined,
//         defaultPort: 80,
//         protocol: 'http:',
//         options: { path: null },
//       requests: {},
//       sockets:
//       { 'localhost:8086:':
//         [ Socket {
//           connecting: false,
//           _hadError: false,
//           _handle: null,
//           _parent: null,
//           _host: 'localhost',
//           _readableState:
//           ReadableState {
//           objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//           length: 0,
//         pipes: null,
//         pipesCount: 0,
//         flowing: true,
//         ended: false,
//         endEmitted: false,
//         reading: true,
//         sync: false,
//         needReadable: true,
//         emittedReadable: false,
//         readableListening: false,
//         resumeScheduled: false,
//         destroyed: true,
//         defaultEncoding: 'utf8',
//         awaitDrain: 0,
//         readingMore: false,
//         decoder: null,
//         encoding: null },
//         readable: false,
//           domain: null,
//         _events:
//         { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//           finish: [Function: onSocketFinish],
//           _socketEnd: [Function: onSocketEnd],
//           free: [Function: onFree],
//           close: [ [Function: onClose], [Function: socketCloseListener] ],
//           agentRemove: [Function: onRemove],
//           drain: [Function: ondrain],
//           error: [Function: socketErrorListener] },
//         _eventsCount: 8,
//           _maxListeners: undefined,
//         _writableState:
//         WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: true,
//           ended: true,
//           finished: true,
//           destroyed: true,
//           decodeStrings: false,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: false,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: true,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] },
//           entry: null,
//             finish: [Function: bound onCorkedFinish] } },
//         writable: false,
//           allowHalfOpen: false,
//         _bytesDispatched: 450,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: null,
//         _server: null,
//         parser: null,
//         _httpMessage: [Circular],
//         read: [Function],
//         _consuming: true,
//         _idleNext: null,
//         _idlePrev: null,
//         _idleTimeout: -1,
//         [Symbol(asyncId)]: 166,
//         [Symbol(bytesRead)]: 450 } ] },
//       freeSockets: {},
//       keepAliveMsecs: 1000,
//         keepAlive: false,
//         maxSockets: Infinity,
//         maxFreeSockets: 256 },
//     socketPath: undefined,
//       timeout: undefined,
//       method: 'POST',
//       path: '/FoodLog',
//       _ended: true,
//       res:
//     IncomingMessage {
//       _readableState:
//         ReadableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//           pipes: null,
//           pipesCount: 0,
//           flowing: true,
//           ended: true,
//           endEmitted: true,
//           reading: false,
//           sync: true,
//           needReadable: false,
//           emittedReadable: false,
//           readableListening: false,
//           resumeScheduled: false,
//           destroyed: false,
//           defaultEncoding: 'utf8',
//           awaitDrain: 0,
//           readingMore: false,
//           decoder: null,
//           encoding: null },
//       readable: false,
//         domain: null,
//         _events:
//       { end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
//         data: [Function: handleStreamData],
//         error: [Function: handleStreamError] },
//       _eventsCount: 3,
//         _maxListeners: undefined,
//         socket:
//       Socket {
//         connecting: false,
//           _hadError: false,
//           _handle: null,
//           _parent: null,
//           _host: 'localhost',
//           _readableState:
//         ReadableState {
//           objectMode: false,
//             highWaterMark: 16384,
//             buffer: BufferList { head: null, tail: null, length: 0 },
//           length: 0,
//             pipes: null,
//             pipesCount: 0,
//             flowing: true,
//             ended: false,
//             endEmitted: false,
//             reading: true,
//             sync: false,
//             needReadable: true,
//             emittedReadable: false,
//             readableListening: false,
//             resumeScheduled: false,
//             destroyed: true,
//             defaultEncoding: 'utf8',
//             awaitDrain: 0,
//             readingMore: false,
//             decoder: null,
//             encoding: null },
//         readable: false,
//           domain: null,
//           _events:
//         { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//           finish: [Function: onSocketFinish],
//           _socketEnd: [Function: onSocketEnd],
//           free: [Function: onFree],
//           close: [ [Function: onClose], [Function: socketCloseListener] ],
//           agentRemove: [Function: onRemove],
//           drain: [Function: ondrain],
//           error: [Function: socketErrorListener] },
//         _eventsCount: 8,
//           _maxListeners: undefined,
//           _writableState:
//         WritableState {
//           objectMode: false,
//             highWaterMark: 16384,
//             finalCalled: false,
//             needDrain: false,
//             ending: true,
//             ended: true,
//             finished: true,
//             destroyed: true,
//             decodeStrings: false,
//             defaultEncoding: 'utf8',
//             length: 0,
//             writing: false,
//             corked: 0,
//             sync: false,
//             bufferProcessing: false,
//             onwrite: [Function: bound onwrite],
//           writecb: null,
//             writelen: 0,
//             bufferedRequest: null,
//             lastBufferedRequest: null,
//             pendingcb: 0,
//             prefinished: true,
//             errorEmitted: false,
//             bufferedRequestCount: 0,
//             corkedRequestsFree:
//           { next:
//           { next: null,
//             entry: null,
//             finish: [Function: bound onCorkedFinish] },
//             entry: null,
//               finish: [Function: bound onCorkedFinish] } },
//         writable: false,
//           allowHalfOpen: false,
//           _bytesDispatched: 450,
//           _sockname: null,
//           _pendingData: null,
//           _pendingEncoding: '',
//           server: null,
//           _server: null,
//           parser: null,
//           _httpMessage: [Circular],
//           read: [Function],
//           _consuming: true,
//           _idleNext: null,
//           _idlePrev: null,
//           _idleTimeout: -1,
//           [Symbol(asyncId)]: 166,
//           [Symbol(bytesRead)]: 450 },
//       connection:
//         Socket {
//         connecting: false,
//           _hadError: false,
//           _handle: null,
//           _parent: null,
//           _host: 'localhost',
//           _readableState:
//         ReadableState {
//           objectMode: false,
//             highWaterMark: 16384,
//             buffer: BufferList { head: null, tail: null, length: 0 },
//           length: 0,
//             pipes: null,
//             pipesCount: 0,
//             flowing: true,
//             ended: false,
//             endEmitted: false,
//             reading: true,
//             sync: false,
//             needReadable: true,
//             emittedReadable: false,
//             readableListening: false,
//             resumeScheduled: false,
//             destroyed: true,
//             defaultEncoding: 'utf8',
//             awaitDrain: 0,
//             readingMore: false,
//             decoder: null,
//             encoding: null },
//         readable: false,
//           domain: null,
//           _events:
//         { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//           finish: [Function: onSocketFinish],
//           _socketEnd: [Function: onSocketEnd],
//           free: [Function: onFree],
//           close: [ [Function: onClose], [Function: socketCloseListener] ],
//           agentRemove: [Function: onRemove],
//           drain: [Function: ondrain],
//           error: [Function: socketErrorListener] },
//         _eventsCount: 8,
//           _maxListeners: undefined,
//           _writableState:
//         WritableState {
//           objectMode: false,
//             highWaterMark: 16384,
//             finalCalled: false,
//             needDrain: false,
//             ending: true,
//             ended: true,
//             finished: true,
//             destroyed: true,
//             decodeStrings: false,
//             defaultEncoding: 'utf8',
//             length: 0,
//             writing: false,
//             corked: 0,
//             sync: false,
//             bufferProcessing: false,
//             onwrite: [Function: bound onwrite],
//           writecb: null,
//             writelen: 0,
//             bufferedRequest: null,
//             lastBufferedRequest: null,
//             pendingcb: 0,
//             prefinished: true,
//             errorEmitted: false,
//             bufferedRequestCount: 0,
//             corkedRequestsFree:
//           { next:
//           { next: null,
//             entry: null,
//             finish: [Function: bound onCorkedFinish] },
//             entry: null,
//               finish: [Function: bound onCorkedFinish] } },
//         writable: false,
//           allowHalfOpen: false,
//           _bytesDispatched: 450,
//           _sockname: null,
//           _pendingData: null,
//           _pendingEncoding: '',
//           server: null,
//           _server: null,
//           parser: null,
//           _httpMessage: [Circular],
//           read: [Function],
//           _consuming: true,
//           _idleNext: null,
//           _idlePrev: null,
//           _idleTimeout: -1,
//           [Symbol(asyncId)]: 166,
//           [Symbol(bytesRead)]: 450 },
//       httpVersionMajor: 1,
//         httpVersionMinor: 1,
//         httpVersion: '1.1',
//         complete: true,
//         headers:
//       { date: 'Thu, 13 Dec 2018 22:31:27 GMT',
//         server: 'Apache/2.4.35 (Unix)',
//         'x-powered-by': 'PHP/7.2.10',
//         connection: 'close',
//         'transfer-encoding': 'chunked',
//         'content-type': 'application/vnd.api+json' },
//       rawHeaders:
//         [ 'Date',
//           'Thu, 13 Dec 2018 22:31:27 GMT',
//           'Server',
//           'Apache/2.4.35 (Unix)',
//           'X-Powered-By',
//           'PHP/7.2.10',
//           'Connection',
//           'close',
//           'Transfer-Encoding',
//           'chunked',
//           'Content-Type',
//           'application/vnd.api+json' ],
//           trailers: {},
//       rawTrailers: [],
//         upgrade: false,
//         url: '',
//         method: null,
//         statusCode: 422,
//         statusMessage: 'Unprocessable Entity',
//         client:
//       Socket {
//         connecting: false,
//           _hadError: false,
//           _handle: null,
//           _parent: null,
//           _host: 'localhost',
//           _readableState:
//         ReadableState {
//           objectMode: false,
//             highWaterMark: 16384,
//             buffer: BufferList { head: null, tail: null, length: 0 },
//           length: 0,
//             pipes: null,
//             pipesCount: 0,
//             flowing: true,
//             ended: false,
//             endEmitted: false,
//             reading: true,
//             sync: false,
//             needReadable: true,
//             emittedReadable: false,
//             readableListening: false,
//             resumeScheduled: false,
//             destroyed: true,
//             defaultEncoding: 'utf8',
//             awaitDrain: 0,
//             readingMore: false,
//             decoder: null,
//             encoding: null },
//         readable: false,
//           domain: null,
//           _events:
//         { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//           finish: [Function: onSocketFinish],
//           _socketEnd: [Function: onSocketEnd],
//           free: [Function: onFree],
//           close: [ [Function: onClose], [Function: socketCloseListener] ],
//           agentRemove: [Function: onRemove],
//           drain: [Function: ondrain],
//           error: [Function: socketErrorListener] },
//         _eventsCount: 8,
//           _maxListeners: undefined,
//           _writableState:
//         WritableState {
//           objectMode: false,
//             highWaterMark: 16384,
//             finalCalled: false,
//             needDrain: false,
//             ending: true,
//             ended: true,
//             finished: true,
//             destroyed: true,
//             decodeStrings: false,
//             defaultEncoding: 'utf8',
//             length: 0,
//             writing: false,
//             corked: 0,
//             sync: false,
//             bufferProcessing: false,
//             onwrite: [Function: bound onwrite],
//           writecb: null,
//             writelen: 0,
//             bufferedRequest: null,
//             lastBufferedRequest: null,
//             pendingcb: 0,
//             prefinished: true,
//             errorEmitted: false,
//             bufferedRequestCount: 0,
//             corkedRequestsFree:
//           { next:
//           { next: null,
//             entry: null,
//             finish: [Function: bound onCorkedFinish] },
//             entry: null,
//               finish: [Function: bound onCorkedFinish] } },
//         writable: false,
//           allowHalfOpen: false,
//           _bytesDispatched: 450,
//           _sockname: null,
//           _pendingData: null,
//           _pendingEncoding: '',
//           server: null,
//           _server: null,
//           parser: null,
//           _httpMessage: [Circular],
//           read: [Function],
//           _consuming: true,
//           _idleNext: null,
//           _idlePrev: null,
//           _idleTimeout: -1,
//           [Symbol(asyncId)]: 166,
//           [Symbol(bytesRead)]: 450 },
//       _consuming: true,
//         _dumped: false,
//         req: [Circular],
//         responseUrl: 'http://localhost:8086/FoodLog',
//         redirects: [],
//         read: [Function] },
//     aborted: undefined,
//       timeoutCb: null,
//       upgradeOrConnect: false,
//       parser: null,
//       maxHeadersCount: null,
//       _redirectable:
//     Writable {
//       _writableState:
//         WritableState {
//         objectMode: false,
//           highWaterMark: 16384,
//           finalCalled: false,
//           needDrain: false,
//           ending: false,
//           ended: false,
//           finished: false,
//           destroyed: false,
//           decodeStrings: true,
//           defaultEncoding: 'utf8',
//           length: 0,
//           writing: false,
//           corked: 0,
//           sync: true,
//           bufferProcessing: false,
//           onwrite: [Function: bound onwrite],
//         writecb: null,
//           writelen: 0,
//           bufferedRequest: null,
//           lastBufferedRequest: null,
//           pendingcb: 0,
//           prefinished: false,
//           errorEmitted: false,
//           bufferedRequestCount: 0,
//           corkedRequestsFree:
//         { next: null,
//           entry: null,
//           finish: [Function: bound onCorkedFinish] } },
//       writable: true,
//         domain: null,
//         _events:
//       { response: [Function: handleResponse],
//         error: [Function: handleRequestError] },
//       _eventsCount: 2,
//         _maxListeners: undefined,
//         _options:
//       { protocol: 'http:',
//         maxRedirects: 21,
//         maxBodyLength: 10485760,
//         path: '/FoodLog',
//         method: 'post',
//         headers:
//         { Accept: 'application/json, text/plain, */*',
//           'Content-Type': 'application/json;charset=utf-8',
//           'User-Agent': 'axios/0.18.0',
//           'Content-Length': 247 },
//         agent: undefined,
//           auth: undefined,
//         hostname: 'localhost',
//         port: '8086',
//         nativeProtocols:
//         { 'http:':
//           { _connectionListener: [Function: connectionListener],
//             METHODS:
//               [ 'ACL',
//                 'BIND',
//                 'CHECKOUT',
//                 'CONNECT',
//                 'COPY',
//                 'DELETE',
//                 'GET',
//                 'HEAD',
//                 'LINK',
//                 'LOCK',
//                 'M-SEARCH',
//                 'MERGE',
//                 'MKACTIVITY',
//                 'MKCALENDAR',
//                 'MKCOL',
//                 'MOVE',
//                 'NOTIFY',
//                 'OPTIONS',
//                 'PATCH',
//                 'POST',
//                 'PROPFIND',
//                 'PROPPATCH',
//                 'PURGE',
//                 'PUT',
//                 'REBIND',
//                 'REPORT',
//                 'SEARCH',
//                 'SOURCE',
//                 'SUBSCRIBE',
//                 'TRACE',
//                 'UNBIND',
//                 'UNLINK',
//                 'UNLOCK',
//                 'UNSUBSCRIBE' ],
//                 STATUS_CODES:
//             { '100': 'Continue',
//               '101': 'Switching Protocols',
//               '102': 'Processing',
//               '200': 'OK',
//               '201': 'Created',
//               '202': 'Accepted',
//               '203': 'Non-Authoritative Information',
//               '204': 'No Content',
//               '205': 'Reset Content',
//               '206': 'Partial Content',
//               '207': 'Multi-Status',
//               '208': 'Already Reported',
//               '226': 'IM Used',
//               '300': 'Multiple Choices',
//               '301': 'Moved Permanently',
//               '302': 'Found',
//               '303': 'See Other',
//               '304': 'Not Modified',
//               '305': 'Use Proxy',
//               '307': 'Temporary Redirect',
//               '308': 'Permanent Redirect',
//               '400': 'Bad Request',
//               '401': 'Unauthorized',
//               '402': 'Payment Required',
//               '403': 'Forbidden',
//               '404': 'Not Found',
//               '405': 'Method Not Allowed',
//               '406': 'Not Acceptable',
//               '407': 'Proxy Authentication Required',
//               '408': 'Request Timeout',
//               '409': 'Conflict',
//               '410': 'Gone',
//               '411': 'Length Required',
//               '412': 'Precondition Failed',
//               '413': 'Payload Too Large',
//               '414': 'URI Too Long',
//               '415': 'Unsupported Media Type',
//               '416': 'Range Not Satisfiable',
//               '417': 'Expectation Failed',
//               '418': 'I\'m a teapot',
//               '421': 'Misdirected Request',
//               '422': 'Unprocessable Entity',
//               '423': 'Locked',
//               '424': 'Failed Dependency',
//               '425': 'Unordered Collection',
//               '426': 'Upgrade Required',
//               '428': 'Precondition Required',
//               '429': 'Too Many Requests',
//               '431': 'Request Header Fields Too Large',
//               '451': 'Unavailable For Legal Reasons',
//               '500': 'Internal Server Error',
//               '501': 'Not Implemented',
//               '502': 'Bad Gateway',
//               '503': 'Service Unavailable',
//               '504': 'Gateway Timeout',
//               '505': 'HTTP Version Not Supported',
//               '506': 'Variant Also Negotiates',
//               '507': 'Insufficient Storage',
//               '508': 'Loop Detected',
//               '509': 'Bandwidth Limit Exceeded',
//               '510': 'Not Extended',
//               '511': 'Network Authentication Required' },
//             Agent:
//             { [Function: Agent]
//               super_:
//               { [Function: EventEmitter]
//                 EventEmitter: [Circular],
//                   usingDomains: false,
//                 defaultMaxListeners: [Getter/Setter],
//                 init: [Function],
//                 listenerCount: [Function] },
//               defaultMaxSockets: Infinity },
//             ClientRequest:
//             { [Function: ClientRequest]
//               super_:
//               { [Function: OutgoingMessage]
//                 super_:
//                 { [Function: Stream]
//                   super_:
//                   { [Function: EventEmitter]
//                     EventEmitter: [Circular],
//                       usingDomains: false,
//                     defaultMaxListeners: [Getter/Setter],
//                     init: [Function],
//                     listenerCount: [Function] },
//                   Readable:
//                   { [Function: Readable]
//                     ReadableState: [Function: ReadableState],
//                     super_: [Circular],
//                       _fromList: [Function: fromList] },
//                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                   Duplex:
//                   { [Function: Duplex]
//                     super_:
//                     { [Function: Readable]
//                       ReadableState: [Function: ReadableState],
//                       super_: [Circular],
//                         _fromList: [Function: fromList] } },
//                   Transform:
//                   { [Function: Transform]
//                     super_:
//                     { [Function: Duplex]
//                       super_:
//                       { [Function: Readable]
//                         ReadableState: [Function: ReadableState],
//                         super_: [Circular],
//                           _fromList: [Function: fromList] } } },
//                   PassThrough:
//                   { [Function: PassThrough]
//                     super_:
//                     { [Function: Transform]
//                       super_:
//                       { [Function: Duplex]
//                         super_:
//                         { [Function: Readable]
//                           ReadableState: [Function: ReadableState],
//                           super_: [Circular],
//                             _fromList: [Function: fromList] } } } },
//                   Stream: [Circular],
//                     _isUint8Array: [Function: isUint8Array],
//                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
//             globalAgent:
//               Agent {
//             domain: null,
//               _events: { free: [Function] },
//             _eventsCount: 1,
//               _maxListeners: undefined,
//               defaultPort: 80,
//               protocol: 'http:',
//               options: { path: null },
//             requests: {},
//             sockets:
//             { 'localhost:8086:':
//               [ Socket {
//                 connecting: false,
//                 _hadError: false,
//                 _handle: null,
//                 _parent: null,
//                 _host: 'localhost',
//                 _readableState:
//                 ReadableState {
//                 objectMode: false,
//                 highWaterMark: 16384,
//                 buffer: BufferList { head: null, tail: null, length: 0 },
//                 length: 0,
//               pipes: null,
//               pipesCount: 0,
//               flowing: true,
//               ended: false,
//               endEmitted: false,
//               reading: true,
//               sync: false,
//               needReadable: true,
//               emittedReadable: false,
//               readableListening: false,
//               resumeScheduled: false,
//               destroyed: true,
//               defaultEncoding: 'utf8',
//               awaitDrain: 0,
//               readingMore: false,
//               decoder: null,
//               encoding: null },
//               readable: false,
//                 domain: null,
//               _events:
//               { end: { [Function: bound onceWrapper] listener: [Function: onend] },
//                 finish: [Function: onSocketFinish],
//                 _socketEnd: [Function: onSocketEnd],
//                 free: [Function: onFree],
//                 close: [ [Function: onClose], [Function: socketCloseListener] ],
//                 agentRemove: [Function: onRemove],
//                 drain: [Function: ondrain],
//                 error: [Function: socketErrorListener] },
//               _eventsCount: 8,
//                 _maxListeners: undefined,
//               _writableState:
//               WritableState {
//               objectMode: false,
//                 highWaterMark: 16384,
//                 finalCalled: false,
//                 needDrain: false,
//                 ending: true,
//                 ended: true,
//                 finished: true,
//                 destroyed: true,
//                 decodeStrings: false,
//                 defaultEncoding: 'utf8',
//                 length: 0,
//                 writing: false,
//                 corked: 0,
//                 sync: false,
//                 bufferProcessing: false,
//                 onwrite: [Function: bound onwrite],
//               writecb: null,
//                 writelen: 0,
//                 bufferedRequest: null,
//                 lastBufferedRequest: null,
//                 pendingcb: 0,
//                 prefinished: true,
//                 errorEmitted: false,
//                 bufferedRequestCount: 0,
//                 corkedRequestsFree:
//               { next:
//               { next: null,
//                 entry: null,
//                 finish: [Function: bound onCorkedFinish] },
//                 entry: null,
//                   finish: [Function: bound onCorkedFinish] } },
//               writable: false,
//                 allowHalfOpen: false,
//               _bytesDispatched: 450,
//               _sockname: null,
//               _pendingData: null,
//               _pendingEncoding: '',
//               server: null,
//               _server: null,
//               parser: null,
//               _httpMessage: [Circular],
//               read: [Function],
//               _consuming: true,
//               _idleNext: null,
//               _idlePrev: null,
//               _idleTimeout: -1,
//               [Symbol(asyncId)]: 166,
//               [Symbol(bytesRead)]: 450 } ] },
//             freeSockets: {},
//             keepAliveMsecs: 1000,
//               keepAlive: false,
//               maxSockets: Infinity,
//               maxFreeSockets: 256 },
//             IncomingMessage:
//             { [Function: IncomingMessage]
//               super_:
//               { [Function: Readable]
//                 ReadableState: [Function: ReadableState],
//                 super_:
//                 { [Function: Stream]
//                   super_:
//                   { [Function: EventEmitter]
//                     EventEmitter: [Circular],
//                       usingDomains: false,
//                     defaultMaxListeners: [Getter/Setter],
//                     init: [Function],
//                     listenerCount: [Function] },
//                   Readable: [Circular],
//                     Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                   Duplex: { [Function: Duplex] super_: [Circular] },
//                   Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
//                   PassThrough:
//                   { [Function: PassThrough]
//                     super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
//                   Stream: [Circular],
//                     _isUint8Array: [Function: isUint8Array],
//                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
//                 _fromList: [Function: fromList] } },
//             OutgoingMessage:
//             { [Function: OutgoingMessage]
//               super_:
//               { [Function: Stream]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] },
//                 Readable:
//                 { [Function: Readable]
//                   ReadableState: [Function: ReadableState],
//                   super_: [Circular],
//                     _fromList: [Function: fromList] },
//                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                 Duplex:
//                 { [Function: Duplex]
//                   super_:
//                   { [Function: Readable]
//                     ReadableState: [Function: ReadableState],
//                     super_: [Circular],
//                       _fromList: [Function: fromList] } },
//                 Transform:
//                 { [Function: Transform]
//                   super_:
//                   { [Function: Duplex]
//                     super_:
//                     { [Function: Readable]
//                       ReadableState: [Function: ReadableState],
//                       super_: [Circular],
//                         _fromList: [Function: fromList] } } },
//                 PassThrough:
//                 { [Function: PassThrough]
//                   super_:
//                   { [Function: Transform]
//                     super_:
//                     { [Function: Duplex]
//                       super_:
//                       { [Function: Readable]
//                         ReadableState: [Function: ReadableState],
//                         super_: [Circular],
//                           _fromList: [Function: fromList] } } } },
//                 Stream: [Circular],
//                   _isUint8Array: [Function: isUint8Array],
//                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } },
//             Server:
//             { [Function: Server]
//               super_:
//               { [Function: Server]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] } } },
//             ServerResponse:
//             { [Function: ServerResponse]
//               super_:
//               { [Function: OutgoingMessage]
//                 super_:
//                 { [Function: Stream]
//                   super_:
//                   { [Function: EventEmitter]
//                     EventEmitter: [Circular],
//                       usingDomains: false,
//                     defaultMaxListeners: [Getter/Setter],
//                     init: [Function],
//                     listenerCount: [Function] },
//                   Readable:
//                   { [Function: Readable]
//                     ReadableState: [Function: ReadableState],
//                     super_: [Circular],
//                       _fromList: [Function: fromList] },
//                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
//                   Duplex:
//                   { [Function: Duplex]
//                     super_:
//                     { [Function: Readable]
//                       ReadableState: [Function: ReadableState],
//                       super_: [Circular],
//                         _fromList: [Function: fromList] } },
//                   Transform:
//                   { [Function: Transform]
//                     super_:
//                     { [Function: Duplex]
//                       super_:
//                       { [Function: Readable]
//                         ReadableState: [Function: ReadableState],
//                         super_: [Circular],
//                           _fromList: [Function: fromList] } } },
//                   PassThrough:
//                   { [Function: PassThrough]
//                     super_:
//                     { [Function: Transform]
//                       super_:
//                       { [Function: Duplex]
//                         super_:
//                         { [Function: Readable]
//                           ReadableState: [Function: ReadableState],
//                           super_: [Circular],
//                             _fromList: [Function: fromList] } } } },
//                   Stream: [Circular],
//                     _isUint8Array: [Function: isUint8Array],
//                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
//             createServer: [Function: createServer],
//             get: [Function: get],
//             request: [Function: request] },
//           'https:':
//           { Server:
//           { [Function: Server]
//             super_:
//             { [Function: Server]
//               super_:
//               { [Function: Server]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] } } } },
//             createServer: [Function: createServer],
//             globalAgent:
//               Agent {
//             domain: null,
//               _events: { free: [Function] },
//             _eventsCount: 1,
//               _maxListeners: undefined,
//               defaultPort: 443,
//               protocol: 'https:',
//               options: { path: null },
//             requests: {},
//             sockets: {},
//             freeSockets: {},
//             keepAliveMsecs: 1000,
//               keepAlive: false,
//               maxSockets: Infinity,
//               maxFreeSockets: 256,
//               maxCachedSessions: 100,
//               _sessionCache:
//             { map:
//             { 'app.datadoghq.com:443:::::::::': <Buffer 30 82 06 9a 02 01 01 02 02 03 03 04 02 c0 2f 04 20 89 d6 f6 39 85 f8 50 62 78 17 a2 63 69 21 6c de 93 95 04 ce 92 ee 4f bf 88 2b 5e f7 5c d8 70 47 04 ... > },
//               list: [ 'app.datadoghq.com:443:::::::::' ] } },
//             Agent:
//             { [Function: Agent]
//               super_:
//               { [Function: Agent]
//                 super_:
//                 { [Function: EventEmitter]
//                   EventEmitter: [Circular],
//                     usingDomains: false,
//                   defaultMaxListeners: [Getter/Setter],
//                   init: [Function],
//                   listenerCount: [Function] },
//                 defaultMaxSockets: Infinity } },
//             request: [Function: request],
//             get: [Function: get] } },
//         pathname: '/FoodLog' },
//       _redirectCount: 0,
//         _redirects: [],
//         _requestBodyLength: 247,
//         _requestBodyBuffers: [],
//         _onNativeResponse: [Function],
//         _currentRequest: [Circular],
//         _currentUrl: 'http://localhost:8086/FoodLog' },
//     [Symbol(outHeadersKey)]:
//     { accept: [ 'Accept', 'application/json, text/plain, */*' ],
//       'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
//       'user-agent': [ 'User-Agent', 'axios/0.18.0' ],
//       'content-length': [ 'Content-Length', 247 ],
//       host: [ 'Host', 'localhost:8086' ] } },
//     data:
//     { errors:
//       [ { meta: { parameters: [ 'date' ] },
//         source: { pointer: '/data/attributes' },
//         title: 'Missing parameters',
//         detail: 'Missing parameters',
//         status: '422' } ],
//         meta: { request_id: 'facaf2a0-5193-4efe-a45e-24dd7da10837' } } } }


// Missing parameter on POST. From catch

